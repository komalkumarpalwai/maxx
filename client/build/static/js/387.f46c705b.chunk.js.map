{"version":3,"file":"static/js/387.f46c705b.chunk.js","mappings":"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","sources":["components/ManageTestsTable.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport api from '../services/api';\n\n// Single clean ViewQuestionsModal component (above ManageTestsTable)\nfunction ViewQuestionsModal({ questions, testId, testTitle, onClose, fetchQuestions }) {\n  const [editIdx, setEditIdx] = useState(null);\n  const [editQ, setEditQ] = useState({});\n  const [saving, setSaving] = useState(false);\n  const [msg, setMsg] = useState('');\n\n  const startEdit = (q, idx) => {\n    setEditIdx(idx);\n    setEditQ({\n      question: q.question,\n      option1: q.options ? q.options[0] : q.option1,\n      option2: q.options ? q.options[1] : q.option2,\n      option3: q.options ? q.options[2] : q.option3,\n      option4: q.options ? q.options[3] : q.option4,\n      correctAnswer: (q.correctAnswer !== undefined && q.correctAnswer !== null) ? (Number(q.correctAnswer) + 1).toString() : '',\n      points: q.points || 1\n    });\n    setMsg('');\n  };\n  const cancelEdit = () => { setEditIdx(null); setEditQ({}); setMsg(''); };\n  const handleEditChange = (field, value) => setEditQ(q => ({ ...q, [field]: value }));\n  const saveEdit = async (idx) => {\n    setMsg('This feature will be released in version 2 of Maxx Solutions.');\n    setSaving(false);\n  };\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\n      <div className=\"bg-white p-6 rounded-lg w-full max-w-2xl max-h-[90vh] flex flex-col overflow-y-auto border border-gray-200\">\n        <h3 className=\"font-semibold text-lg mb-4\">Questions for: <span className=\"text-blue-700\">{testTitle}</span></h3>\n        {questions.length === 0 ? (\n          <div className=\"text-gray-500\">No questions found for this test.</div>\n        ) : (\n          <ol className=\"list-decimal ml-5 space-y-3\">\n            {questions.map((q, idx) => (\n              <li key={idx} className=\"mb-2\">\n                {editIdx === idx ? (\n                  <div className=\"border rounded p-2 bg-gray-50\">\n                    <input className=\"input w-full mb-1\" value={editQ.question} onChange={e => handleEditChange('question', e.target.value)} />\n                    <div className=\"flex gap-2 mb-1\">\n                      <input className=\"input flex-1\" placeholder=\"Option 1\" value={editQ.option1} onChange={e => handleEditChange('option1', e.target.value)} />\n                      <input className=\"input flex-1\" placeholder=\"Option 2\" value={editQ.option2} onChange={e => handleEditChange('option2', e.target.value)} />\n                      <input className=\"input flex-1\" placeholder=\"Option 3\" value={editQ.option3} onChange={e => handleEditChange('option3', e.target.value)} />\n                      <input className=\"input flex-1\" placeholder=\"Option 4\" value={editQ.option4} onChange={e => handleEditChange('option4', e.target.value)} />\n                    </div>\n                    <div className=\"flex gap-2 mb-1\">\n                      <select className=\"input w-32\" value={editQ.correctAnswer} onChange={e => handleEditChange('correctAnswer', e.target.value)}>\n                        <option value=\"\">Correct Answer</option>\n                        <option value=\"1\">Option 1</option>\n                        <option value=\"2\">Option 2</option>\n                        <option value=\"3\">Option 3</option>\n                        <option value=\"4\">Option 4</option>\n                      </select>\n                      <input className=\"input w-20\" type=\"number\" min=\"1\" value={editQ.points} onChange={e => handleEditChange('points', e.target.value)} placeholder=\"Points\" />\n                    </div>\n                    <div className=\"flex gap-2 mt-2\">\n                      <button className=\"px-3 py-1 bg-blue-600 text-white rounded\" onClick={() => saveEdit(idx)} disabled={saving}>Save</button>\n                      <button className=\"px-3 py-1 bg-gray-400 text-white rounded\" onClick={cancelEdit} disabled={saving}>Cancel</button>\n                    </div>\n                    {msg && <div className=\"text-xs text-red-600 mt-1\">{msg}</div>}\n                  </div>\n                ) : (\n                  <>\n                    <div className=\"font-medium\">Q{idx + 1}: {q.question}</div>\n                    <ul className=\"ml-4 text-sm\">\n                      <li>A. {q.options ? q.options[0] : q.option1}</li>\n                      <li>B. {q.options ? q.options[1] : q.option2}</li>\n                      <li>C. {q.options ? q.options[2] : q.option3}</li>\n                      <li>D. {q.options ? q.options[3] : q.option4}</li>\n                    </ul>\n                    <div className=\"text-xs text-gray-500 mt-1\">Correct: Option {(q.correctAnswer !== undefined && q.correctAnswer !== null) ? (Number(q.correctAnswer) + 1) : ''} | Points: {q.points}</div>\n                    <button className=\"mt-1 px-2 py-1 bg-yellow-500 text-white rounded text-xs\" onClick={() => startEdit(q, idx)}>Edit</button>\n                  </>\n                )}\n              </li>\n            ))}\n          </ol>\n        )}\n        <button className=\"mt-6 px-4 py-2 bg-gray-400 text-white rounded self-end\" onClick={onClose}>Close</button>\n      </div>\n    </div>\n  );\n}\n\nfunction AddQuestionsModal({ closeQModal, handleAddQuestions, loading }) {\n  const [showCSV, setShowCSV] = useState(false);\n  const [csvError, setCsvError] = useState('');\n  const [csvQuestions, setCsvQuestions] = useState([]);\n  const [csvLoading, setCsvLoading] = useState(false);\n  const [manualQuestions, setManualQuestions] = useState([\n    { question: '', option1: '', option2: '', option3: '', option4: '', correctAnswer: '', points: '' }\n  ]);\n  const [currentIdx, setCurrentIdx] = useState(0);\n  const [manualError, setManualError] = useState('');\n  // Parse CSV string to array of question objects\n  function parseCSV(csvText) {\n    const lines = csvText.trim().split(/\\r?\\n/);\n    if (lines.length < 2) return [];\n    const header = lines[0].split(',').map(h => h.trim());\n    return lines.slice(1).map(line => {\n      const values = line.split(',');\n      const obj = {};\n      header.forEach((h, i) => {\n        obj[h] = values[i] ? values[i].trim() : '';\n      });\n      return obj;\n    });\n  }\n\n  const handleCSVUpload = async (e) => {\n    setCsvError('');\n    setCsvQuestions([]);\n    const file = e.target.files[0];\n    if (!file) return;\n    if (!file.name.endsWith('.csv')) {\n      setCsvError('Please upload a .csv file.');\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      try {\n        const text = event.target.result;\n        const questions = parseCSV(text);\n        if (!questions.length) {\n          setCsvError('No valid questions found in CSV.');\n        } else {\n          setCsvQuestions(questions);\n        }\n      } catch (err) {\n        setCsvError('Failed to parse CSV.');\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const handleSaveCSVQuestions = async () => {\n    setCsvError('');\n    setCsvLoading(true);\n    // Validate questions\n    const validQuestions = csvQuestions.filter(q => q.question && q.option1 && q.option2 && q.option3 && q.option4 && q.correctAnswer && q.points);\n    if (!validQuestions.length) {\n      setCsvError('No valid questions to save.');\n      setCsvLoading(false);\n      return;\n    }\n    try {\n      await handleAddQuestions(validQuestions);\n      setShowCSV(false);\n      setCsvQuestions([]);\n      closeQModal();\n    } catch (err) {\n      setCsvError('Failed to save questions.');\n    } finally {\n      setCsvLoading(false);\n    }\n  };\n  const handleManualChange = (field, value) => {\n    setManualQuestions(qs => qs.map((q, i) => i === currentIdx ? { ...q, [field]: value } : q));\n  };\n  const goNext = () => {\n    if (currentIdx === manualQuestions.length - 1) {\n      setManualQuestions(qs => [...qs, { question: '', option1: '', option2: '', option3: '', option4: '', correctAnswer: '', points: '' }]);\n    }\n    setCurrentIdx(idx => idx + 1);\n  };\n  const goPrev = () => {\n    if (currentIdx > 0) setCurrentIdx(idx => idx - 1);\n  };\n  const removeCurrent = () => {\n    if (manualQuestions.length === 1) return;\n    setManualQuestions(qs => {\n      const arr = qs.filter((_, i) => i !== currentIdx);\n      return arr;\n    });\n    setCurrentIdx(idx => (idx > 0 ? idx - 1 : 0));\n  };\n  const saveManualQuestions = async () => {\n    setManualError('');\n    const validQuestions = manualQuestions.filter(q => q.question.trim());\n    if (validQuestions.length === 0) {\n      setManualError('Please add at least one question.');\n      return;\n    }\n    // Validate all fields for each question\n    for (let i = 0; i < validQuestions.length; i++) {\n      const q = validQuestions[i];\n      if (!q.option1 || !q.option2 || !q.option3 || !q.option4) {\n        setManualError(`All options are required for question ${i + 1}`);\n        return;\n      }\n      if (!q.correctAnswer) {\n        setManualError(`Correct answer is required for question ${i + 1}`);\n        return;\n      }\n    }\n    await handleAddQuestions(validQuestions);\n    closeQModal();\n  };\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-20 flex items-center justify-center z-50\">\n      <div className=\"bg-white p-6 rounded-lg w-full max-w-md border border-gray-200 shadow-xl flex flex-col\" style={{ minWidth: 350 }}>\n        <h2 className=\"font-semibold text-xl mb-3 text-gray-800\">Add Questions</h2>\n        <div className=\"flex gap-2 mb-4\">\n          <button className=\"px-3 py-1 bg-blue-500 text-white rounded\" onClick={() => setShowCSV(true)}>Bulk Upload (CSV)</button>\n          <button className=\"px-3 py-1 bg-gray-300 text-gray-600 rounded cursor-not-allowed\" disabled>Generate with AI (Coming Soon)</button>\n        </div>\n        {showCSV && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\n            <div className=\"bg-white p-4 rounded-lg w-full max-w-md border border-gray-200\">\n              <h4 className=\"font-semibold mb-2 text-gray-700\">CSV Format</h4>\n              <p className=\"text-xs mb-2\">Columns: <b>question, option1, option2, option3, option4, correctAnswer (1-4), points</b></p>\n              <div className=\"bg-gray-100 p-2 rounded text-xs mb-2\">\n                question,option1,option2,option3,option4,correctAnswer,points<br />\n                What is 2+2?,2,3,4,5,3,1<br />\n                Capital of France?,London,Berlin,Paris,Rome,3,1\n              </div>\n              <input type=\"file\" accept=\".csv\" onChange={handleCSVUpload} className=\"mb-2\" />\n              {csvQuestions.length > 0 && (\n                <div className=\"mb-2 text-xs text-green-700\">{csvQuestions.length} questions ready to save.</div>\n              )}\n              {csvError && <div className=\"text-red-600 text-xs mb-2\">{csvError}</div>}\n              <div className=\"flex gap-2 mt-2\">\n                <button className=\"px-3 py-1 bg-blue-500 text-white rounded\" onClick={handleSaveCSVQuestions} disabled={csvLoading || !csvQuestions.length}>{csvLoading ? 'Saving...' : 'Save'}</button>\n                <button className=\"px-3 py-1 bg-gray-500 text-white rounded\" onClick={() => setShowCSV(false)} disabled={csvLoading}>Close</button>\n              </div>\n            </div>\n          </div>\n        )}\n        <div className=\"mb-4\">\n          <h3 className=\"font-semibold text-base mb-2 text-gray-700\">Create Questions Manually</h3>\n          <div className=\"border border-gray-200 rounded p-3 bg-white flex flex-col gap-2\">\n            <div className=\"flex flex-wrap gap-2 items-center mb-2\">\n              <input className=\"input flex-1 border-gray-300 text-sm\" placeholder=\"Question\" value={manualQuestions[currentIdx].question} onChange={e => handleManualChange('question', e.target.value)} />\n              <input className=\"input w-20 border-gray-300 text-sm\" placeholder=\"Points\" type=\"number\" value={manualQuestions[currentIdx].points} onChange={e => handleManualChange('points', e.target.value)} />\n              <button className=\"px-2 py-1 bg-red-100 text-red-600 rounded text-xs\" onClick={removeCurrent} disabled={manualQuestions.length === 1}>Remove</button>\n            </div>\n            <div className=\"flex flex-wrap gap-2 items-center\">\n              <input className=\"input flex-1 border-gray-300 text-sm\" placeholder=\"Option 1\" value={manualQuestions[currentIdx].option1} onChange={e => handleManualChange('option1', e.target.value)} />\n              <input className=\"input flex-1 border-gray-300 text-sm\" placeholder=\"Option 2\" value={manualQuestions[currentIdx].option2} onChange={e => handleManualChange('option2', e.target.value)} />\n              <input className=\"input flex-1 border-gray-300 text-sm\" placeholder=\"Option 3\" value={manualQuestions[currentIdx].option3} onChange={e => handleManualChange('option3', e.target.value)} />\n              <input className=\"input flex-1 border-gray-300 text-sm\" placeholder=\"Option 4\" value={manualQuestions[currentIdx].option4} onChange={e => handleManualChange('option4', e.target.value)} />\n              <select className=\"input w-28 border-gray-300 text-sm\" value={manualQuestions[currentIdx].correctAnswer} onChange={e => handleManualChange('correctAnswer', e.target.value)}>\n                <option value=\"\">Correct</option>\n                <option value=\"1\">Option 1</option>\n                <option value=\"2\">Option 2</option>\n                <option value=\"3\">Option 3</option>\n                <option value=\"4\">Option 4</option>\n              </select>\n            </div>\n            <div className=\"flex justify-between mt-2\">\n              <button className=\"px-3 py-1 bg-gray-200 text-gray-800 rounded text-sm\" onClick={goPrev} disabled={currentIdx === 0}>Previous</button>\n              <span className=\"text-xs text-gray-500\">Question {currentIdx + 1} of {manualQuestions.length}</span>\n              <button className=\"px-3 py-1 bg-gray-200 text-gray-800 rounded text-sm\" onClick={goNext}>Next</button>\n            </div>\n          </div>\n          <div className=\"mt-2\">\n            <h4 className=\"font-semibold text-xs mb-1 text-gray-600\">Summary</h4>\n            <ul className=\"text-xs text-gray-700 list-decimal ml-5\">\n              {manualQuestions.filter(q => q.question.trim()).map((q, i) => (\n                <li key={i} className={i === currentIdx ? 'font-bold text-blue-600' : ''}>{q.question.slice(0, 40) || 'Untitled'}</li>\n              ))}\n            </ul>\n          </div>\n          {manualError && <div className=\"text-red-600 text-xs mt-2\">{manualError}</div>}\n        </div>\n        <div className=\"flex gap-2 justify-end mt-4\">\n          <button className=\"px-4 py-2 bg-blue-500 text-white rounded\" onClick={saveManualQuestions} disabled={loading}>Save</button>\n          <button className=\"px-4 py-2 bg-gray-300 text-gray-700 rounded\" onClick={closeQModal}>Cancel</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n\nfunction ManageTestsTable() {\n  const [viewQModal, setViewQModal] = useState({ open: false, questions: [], testTitle: '' });\n\n  const openViewQModal = async (test) => {\n    setLoading(true); setError('');\n    try {\n      const res = await api.get(`/tests/${test._id}/admin-questions`);\n      setViewQModal({ open: true, questions: res.data.questions || [], testTitle: test.title });\n    } catch (err) {\n      setError('Failed to fetch questions');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const closeViewQModal = () => setViewQModal({ open: false, questions: [], testTitle: '' });\n  const [tests, setTests] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [showQModal, setShowQModal] = useState(false);\n  const [currentTestId, setCurrentTestId] = useState(null);\n  const [branchOptions, setBranchOptions] = useState([]);\n  const [yearOptions, setYearOptions] = useState([]);\n\n  useEffect(() => {\n    // Fetch allowed branches/years from backend\n    const fetchRegistrationOptions = async () => {\n      try {\n        const res = await api.get('/meta/registration-options');\n        setBranchOptions(res.data.branches || []);\n        setYearOptions(res.data.years || []);\n      } catch (err) {\n        setBranchOptions([]);\n        setYearOptions([]);\n      }\n    };\n    fetchRegistrationOptions();\n  }, []);\n  const [editModal, setEditModal] = useState({ open: false, test: null, form: {} });\n  const [windowModal, setWindowModal] = useState({ open: false, testId: null, start: '', end: '', duration: '' });\n\n  // No need to fetch branches/years from users; use enums above\n\n  const fetchTests = async () => {\n    setLoading(true); setError('');\n    try {\n      // Fetch all tests for admin (not just active ones)\n      const res = await api.get('/tests?all=1');\n      setTests(res.data.tests || []);\n    } catch (err) {\n      setError('Failed to fetch tests');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => { fetchTests(); }, []);\n\n  const openQModal = (testId) => { setCurrentTestId(testId); setShowQModal(true); };\n  const closeQModal = () => { setShowQModal(false); setCurrentTestId(null); };\n\n  const openEditModal = (test) => {\n    setEditModal({\n      open: true,\n      test,\n      form: {\n        requireAllQuestions: test.requireAllQuestions ?? true,\n        allowNavigation: test.allowNavigation ?? true,\n        deviceRestriction: test.deviceRestriction || 'both',\n        allowedBranches: test.allowedBranches || [],\n        allowedYears: test.allowedYears || [],\n        tabSwitchLimit: test.tabSwitchLimit ?? 3\n      }\n    });\n  };\n  const closeEditModal = () => setEditModal({ open: false, test: null, form: {} });\n  const handleEditChange = (field, value) => {\n    setEditModal((prev) => ({ ...prev, form: { ...prev.form, [field]: value } }));\n  };\n  const handleEditSave = async () => {\n    setLoading(true); setError(''); setSuccess('');\n    if (!editModal.form.tabSwitchLimit || editModal.form.tabSwitchLimit < 1) {\n      setError('Tab Switch Limit must be at least 1'); setLoading(false); return;\n    }\n    if (!editModal.form.allowedBranches || editModal.form.allowedBranches.length === 0) {\n      setError('Select at least one allowed branch'); setLoading(false); return;\n    }\n    if (!editModal.form.allowedYears || editModal.form.allowedYears.length === 0) {\n      setError('Select at least one allowed year'); setLoading(false); return;\n    }\n    try {\n      await api.put(`/tests/${editModal.test._id}`, editModal.form);\n      setSuccess('Test settings updated!');\n      closeEditModal();\n      fetchTests();\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to update test settings');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const doActivate = async (testId, start, end, duration) => {\n    setLoading(true); setError(''); setSuccess('');\n    try {\n      const mins = parseInt(duration, 10);\n      if (!start || !end) {\n        setError('Please select both start and end date/time');\n        setLoading(false);\n        return;\n      }\n      if (isNaN(mins) || mins < 1) {\n        setError('Please enter a valid duration (minutes)');\n        setLoading(false);\n        return;\n      }\n      await api.put(`/tests/${testId}/activate`, { startDate: start, endDate: end, duration: mins });\n      setSuccess('Test activated!');\n      setWindowModal({ open: false, testId: null, start: '', end: '', duration: '' });\n      fetchTests();\n    } catch (err) {\n      // Show backend validation error if present\n      const backendMsg = err.response?.data?.message;\n      setError(backendMsg || 'Failed to activate test');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleActivate = (testId) => {\n    setWindowModal({ open: true, testId, start: '', end: '', duration: '' });\n  };\n  const handleDeactivate = async (id) => {\n    setLoading(true); setError(''); setSuccess('');\n    try {\n      await api.put(`/tests/${id}/deactivate`);\n      setSuccess('Test deactivated!');\n      fetchTests();\n    } catch (err) {\n      setError('Failed to deactivate test');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDeleteTest = async (id) => {\n    if (!window.confirm('Are you sure you want to delete this test? This action cannot be undone.')) return;\n    setLoading(true); setError(''); setSuccess('');\n    try {\n      await api.delete(`/tests/${id}`);\n      setSuccess('Test deleted successfully!');\n      fetchTests();\n    } catch (err) {\n      setError('Failed to delete test');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddQuestions = async (questions) => {\n    if (!currentTestId || !questions || questions.length === 0) return;\n    setLoading(true); setError(''); setSuccess('');\n    try {\n      await api.put(`/tests/${currentTestId}/questions`, { questions });\n      setSuccess('Questions added!');\n      fetchTests();\n    } catch (err) {\n      setError('Failed to add questions');\n    } finally {\n      setLoading(false);\n    }\n  };\nconst [showGuide, setShowGuide] = useState(true);\n  return (\n\n    \n    <div>\n     \n\n      <h3 className=\"font-semibold mb-2\">All Tests</h3>\n      {loading && (\n        <div className=\"flex items-center justify-center py-8\" role=\"status\" aria-live=\"polite\">\n          <svg className=\"animate-spin h-8 w-8 text-blue-600 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8v8z\" />\n          </svg>\n          <span>Loading tests...</span>\n        </div>\n      )}\n      {error && <div className=\"text-red-600\">{error}</div>}\n      {success && <div className=\"text-green-600\">{success}</div>}\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full border text-sm\" aria-label=\"All tests table\">\n          <thead>\n            <tr className=\"bg-gray-100\">\n              <th className=\"border px-2 py-1\">Title</th>\n              <th className=\"border px-2 py-1\">Questions</th>\n              <th className=\"border px-2 py-1\">Category</th>\n              <th className=\"border px-2 py-1\">Window</th>\n              <th className=\"border px-2 py-1\">Active</th>\n              <th className=\"border px-2 py-1\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tests.length === 0 ? (\n              <tr>\n                <td colSpan={6} className=\"text-center text-gray-500 py-8\">No tests found. Please create a test in the Create Test tab.</td>\n              </tr>\n            ) : (\n              tests.map(test => {\n                const questionCount = Array.isArray(test.questions) ? test.questions.length : (test.totalQuestions || 0);\n                return (\n                  <tr key={test._id} tabIndex={0} aria-label={test.title}>\n                    <td className=\"border px-2 py-1\">\n                      <div className=\"font-semibold\">{test.title}</div>\n                    </td>\n                    <td className=\"border px-2 py-1 text-center\">{questionCount}</td>\n                    <td className=\"border px-2 py-1\">{test.category}</td>\n                    <td className=\"border px-2 py-1\">\n                      {test.startDate && test.endDate ? (\n                        <span>{new Date(test.startDate).toLocaleString()} to {new Date(test.endDate).toLocaleString()}<br />\n                          <span className=\"text-xs text-gray-500\">Duration: {test.duration ? test.duration + ' min' : Math.round((new Date(test.endDate) - new Date(test.startDate))/60000) + ' min'}</span>\n                        </span>\n                      ) : (\n                        <span className=\"text-gray-400\">Not set</span>\n                      )}\n                    </td>\n                    <td className=\"border px-2 py-1\">{test.isActive ? 'Yes' : 'No'}</td>\n                   <td className=\"border px-2 py-1\">\n  <div className=\"flex flex-wrap gap-1 items-center\">\n    <button className=\"px-2 py-1 bg-yellow-500 text-white rounded text-xs\" onClick={() => openQModal(test._id)} aria-label={`Add questions to ${test.title}`}>Add</button>\n    <button className=\"px-2 py-1 bg-gray-500 text-white rounded text-xs\" onClick={() => openViewQModal(test)} aria-label={`View questions for ${test.title}`}>View</button>\n    <button className=\"px-2 py-1 bg-blue-600 text-white rounded text-xs\" onClick={() => openEditModal(test)} aria-label={`Edit settings for ${test.title}`}>Edit</button>\n    {test.isActive ? (\n      <button className=\"px-2 py-1 bg-red-600 text-white rounded text-xs\" onClick={() => {\n        if (window.confirm(`Are you sure you want to stop the test \"${test.title}\"?`)) handleDeactivate(test._id);\n      }} aria-label={`Stop test ${test.title}`}>Stop</button>\n    ) : (\n      <button className={`px-2 py-1 rounded text-xs ${questionCount === 0 ? 'bg-gray-400 text-white cursor-not-allowed' : 'bg-green-600 text-white'}`}\n        onClick={() => {\n          if (questionCount === 0) return;\n          if (window.confirm(`Are you sure you want to start the test \"${test.title}\"?`)) handleActivate(test._id);\n        }}\n        aria-label={`Start test ${test.title}`}\n        disabled={questionCount === 0}\n      >\n        Start\n      </button>\n    )}\n    <button className=\"px-2 py-1 bg-gray-800 text-white rounded text-xs\" onClick={() => handleDeleteTest(test._id)} aria-label={`Delete test ${test.title}`}>Delete</button>\n  </div>\n</td>\n                  </tr>\n                );\n              })\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Edit Test Settings Modal */}\n      {editModal.open && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded shadow-lg w-full max-w-md\">\n            <h3 className=\"font-semibold mb-4\">Edit Test Settings</h3>\n            <div className=\"mb-3\">\n              <label className=\"block font-medium mb-1\">Require All Questions to be Attempted</label>\n              <input type=\"checkbox\" checked={editModal.form.requireAllQuestions} onChange={e => handleEditChange('requireAllQuestions', e.target.checked)} />\n              <span className=\"ml-2\">ON</span>\n            </div>\n            <div className=\"mb-3\">\n              <label className=\"block font-medium mb-1\">Allow Navigation Between Questions</label>\n              <input type=\"checkbox\" checked={editModal.form.allowNavigation} onChange={e => handleEditChange('allowNavigation', e.target.checked)} />\n              <span className=\"ml-2\">ON</span>\n            </div>\n            <div className=\"mb-3\">\n              <label className=\"block font-medium mb-1\">Tab Switch Limit</label>\n              <input type=\"number\" min={1} max={10} value={editModal.form.tabSwitchLimit} onChange={e => handleEditChange('tabSwitchLimit', Number(e.target.value))} className=\"input w-20 ml-2\" />\n              <span className=\"ml-2 text-xs\">(Default: 3, 4th switch auto-submits)</span>\n            </div>\n            <div className=\"mb-3\">\n              <label className=\"block font-medium mb-1\">Device Restriction</label>\n              <div className=\"flex gap-2\">\n                <label><input type=\"radio\" name=\"deviceRestriction\" value=\"mobile\" checked={editModal.form.deviceRestriction === 'mobile'} onChange={e => handleEditChange('deviceRestriction', e.target.value)} /> Mobile Only</label>\n                <label><input type=\"radio\" name=\"deviceRestriction\" value=\"desktop\" checked={editModal.form.deviceRestriction === 'desktop'} onChange={e => handleEditChange('deviceRestriction', e.target.value)} /> Laptop/Desktop Only</label>\n                <label><input type=\"radio\" name=\"deviceRestriction\" value=\"both\" checked={editModal.form.deviceRestriction === 'both'} onChange={e => handleEditChange('deviceRestriction', e.target.value)} /> Both</label>\n              </div>\n            </div>\n            <div className=\"mb-3\">\n              <label className=\"block font-medium mb-1\">Allowed Branches</label>\n              <select multiple className=\"input w-full\" value={editModal.form.allowedBranches} onChange={e => {\n                const values = Array.from(e.target.selectedOptions, o => o.value);\n                // If 'ALL' is selected, override all others\n                if (values.includes('__ALL__')) {\n                  handleEditChange('allowedBranches', ['__ALL__']);\n                } else {\n                  handleEditChange('allowedBranches', values);\n                }\n              }}>\n                <option value=\"__ALL__\">All Branches (Allow all students)</option>\n                {branchOptions.map(branch => <option key={branch} value={branch}>{branch}</option>)}\n              </select>\n            </div>\n            <div className=\"mb-3\">\n              <label className=\"block font-medium mb-1\">Allowed Years</label>\n              <select multiple className=\"input w-full\" value={editModal.form.allowedYears} onChange={e => {\n                const values = Array.from(e.target.selectedOptions, o => o.value);\n                if (values.includes('__ALL__')) {\n                  handleEditChange('allowedYears', ['__ALL__']);\n                } else {\n                  handleEditChange('allowedYears', values);\n                }\n              }}>\n                <option value=\"__ALL__\">All Years (Allow all students)</option>\n                {yearOptions.map(year => <option key={year} value={year}>{year}</option>)}\n              </select>\n            </div>\n            <div className=\"flex gap-2 mt-4\">\n              <button className=\"px-4 py-2 bg-blue-600 text-white rounded\" onClick={handleEditSave} disabled={loading}>Save</button>\n              <button className=\"px-4 py-2 bg-gray-400 text-white rounded\" onClick={closeEditModal}>Cancel</button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Add Questions Modal */}\n      {showQModal && (\n        <AddQuestionsModal\n          closeQModal={closeQModal}\n          handleAddQuestions={handleAddQuestions}\n          loading={loading}\n        />\n      )}\n\n      {/* View Questions Modal */}\n      {viewQModal.open && (\n        <ViewQuestionsModal\n          questions={viewQModal.questions}\n          testId={viewQModal.testId}\n          testTitle={viewQModal.testTitle}\n          onClose={closeViewQModal}\n          fetchQuestions={openViewQModal}\n        />\n      )}\n\n      {/* Set Window Modal for Start Test */}\n      {windowModal.open && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded shadow-lg w-full max-w-md\">\n            <h3 className=\"font-semibold mb-2\">Set Exam Window & Duration</h3>\n            <div className=\"mb-4\">\n              <label className=\"block mb-1\">Start Date & Time</label>\n              <input type=\"datetime-local\" className=\"input w-full\" value={windowModal.start} onChange={e => setWindowModal(w => ({ ...w, start: e.target.value }))} />\n            </div>\n            <div className=\"mb-4\">\n              <label className=\"block mb-1\">End Date & Time</label>\n              <input type=\"datetime-local\" className=\"input w-full\" value={windowModal.end} onChange={e => setWindowModal(w => ({ ...w, end: e.target.value }))} />\n            </div>\n            <div className=\"mb-4\">\n              <label className=\"block mb-1\">Duration (minutes)</label>\n              <input type=\"number\" min=\"1\" className=\"input w-full\" value={windowModal.duration} onChange={e => setWindowModal(w => ({ ...w, duration: e.target.value }))} placeholder=\"Enter duration in minutes\" />\n            </div>\n            <div className=\"flex space-x-2\">\n              <button\n                className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n                onClick={() => doActivate(windowModal.testId, windowModal.start, windowModal.end, windowModal.duration)}\n                disabled={!windowModal.start || !windowModal.end || !windowModal.duration || loading}\n              >\n                Start Test\n              </button>\n              <button className=\"px-4 py-2 bg-gray-400 text-white rounded\" onClick={() => setWindowModal({ open: false, testId: null, start: '', end: '', duration: '' })}>Cancel</button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n\n\n\nfunction ManageTestsTable() {\n  const [viewQModal, setViewQModal] = useState({ open: false, questions: [], testTitle: '' });\n\n  const openViewQModal = async (test) => {\n    setLoading(true); setError('');\n    try {\n      const res = await api.get(`/tests/${test._id}/admin-questions`);\n      setViewQModal({ open: true, questions: res.data.questions || [], testTitle: test.title });\n    } catch (err) {\n      setError('Failed to fetch questions');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const closeViewQModal = () => setViewQModal({ open: false, questions: [], testTitle: '' });\n  const [tests, setTests] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [showQModal, setShowQModal] = useState(false);\n  const [currentTestId, setCurrentTestId] = useState(null);\n  const [branchOptions, setBranchOptions] = useState([]);\n  const [yearOptions, setYearOptions] = useState([]);\n\n  useEffect(() => {\n    // Fetch allowed branches/years from backend\n    const fetchRegistrationOptions = async () => {\n      try {\n        const res = await api.get('/meta/registration-options');\n        setBranchOptions(res.data.branches || []);\n        setYearOptions(res.data.years || []);\n      } catch (err) {\n        setBranchOptions([]);\n        setYearOptions([]);\n      }\n    };\n    fetchRegistrationOptions();\n  }, []);\n  const [editModal, setEditModal] = useState({ open: false, test: null, form: {} });\n  const [windowModal, setWindowModal] = useState({ open: false, testId: null, start: '', end: '', duration: '' });\n\n  // No need to fetch branches/years from users; use enums above\n\n  const fetchTests = async () => {\n    setLoading(true); setError('');\n    try {\n      // Fetch all tests for admin (not just active ones)\n      const res = await api.get('/tests?all=1');\n      setTests(res.data.tests || []);\n    } catch (err) {\n      setError('Failed to fetch tests');\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => { fetchTests(); }, []);\n\n  const openQModal = (testId) => { setCurrentTestId(testId); setShowQModal(true); };\n  const closeQModal = () => { setShowQModal(false); setCurrentTestId(null); };\n\n  const openEditModal = (test) => {\n    setEditModal({\n      open: true,\n      test,\n      form: {\n        requireAllQuestions: test.requireAllQuestions ?? true,\n        allowNavigation: test.allowNavigation ?? true,\n        deviceRestriction: test.deviceRestriction || 'both',\n        allowedBranches: test.allowedBranches || [],\n        allowedYears: test.allowedYears || [],\n        tabSwitchLimit: test.tabSwitchLimit ?? 3\n      }\n    });\n  };\n  const closeEditModal = () => setEditModal({ open: false, test: null, form: {} });\n  const handleEditChange = (field, value) => {\n    setEditModal((prev) => ({ ...prev, form: { ...prev.form, [field]: value } }));\n  };\n  const handleEditSave = async () => {\n    setLoading(true); setError(''); setSuccess('');\n    if (!editModal.form.tabSwitchLimit || editModal.form.tabSwitchLimit < 1) {\n      setError('Tab Switch Limit must be at least 1'); setLoading(false); return;\n    }\n    if (!editModal.form.allowedBranches || editModal.form.allowedBranches.length === 0) {\n      setError('Select at least one allowed branch'); setLoading(false); return;\n    }\n    if (!editModal.form.allowedYears || editModal.form.allowedYears.length === 0) {\n      setError('Select at least one allowed year'); setLoading(false); return;\n    }\n    try {\n      await api.put(`/tests/${editModal.test._id}`, editModal.form);\n      setSuccess('Test settings updated!');\n      closeEditModal();\n      fetchTests();\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to update test settings');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const doActivate = async (testId, start, end, duration) => {\n    setLoading(true); setError(''); setSuccess('');\n    try {\n      const mins = parseInt(duration, 10);\n      if (!start || !end) {\n        setError('Please select both start and end date/time');\n        setLoading(false);\n        return;\n      }\n      if (isNaN(mins) || mins < 1) {\n        setError('Please enter a valid duration (minutes)');\n        setLoading(false);\n        return;\n      }\n      await api.put(`/tests/${testId}/activate`, { startDate: start, endDate: end, duration: mins });\n      setSuccess('Test activated!');\n      setWindowModal({ open: false, testId: null, start: '', end: '', duration: '' });\n      fetchTests();\n    } catch (err) {\n      setError('Failed to activate test');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleActivate = (testId) => {\n    setWindowModal({ open: true, testId, start: '', end: '', duration: '' });\n  };\n  const handleDeactivate = async (id) => {\n    setLoading(true); setError(''); setSuccess('');\n    try {\n      await api.put(`/tests/${id}/deactivate`);\n      setSuccess('Test deactivated!');\n      fetchTests();\n    } catch (err) {\n      setError('Failed to deactivate test');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDeleteTest = async (id) => {\n    if (!window.confirm('Are you sure you want to delete this test? This action cannot be undone.')) return;\n    setLoading(true); setError(''); setSuccess('');\n    try {\n      await api.delete(`/tests/${id}`);\n      setSuccess('Test deleted successfully!');\n      fetchTests();\n    } catch (err) {\n      setError('Failed to delete test');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleAddQuestions = async (questions) => {\n    if (!currentTestId || !questions || questions.length === 0) return;\n    setLoading(true); setError(''); setSuccess('');\n    try {\n      await api.put(`/tests/${currentTestId}/questions`, { questions });\n      setSuccess('Questions added!');\n      fetchTests();\n    } catch (err) {\n      setError('Failed to add questions');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h3 className=\"font-semibold mb-2\">All Tests</h3>\n      {loading && (\n        <div className=\"flex items-center justify-center py-8\" role=\"status\" aria-live=\"polite\">\n          <svg className=\"animate-spin h-8 w-8 text-blue-600 mr-2\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n            <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n            <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8v8z\" />\n          </svg>\n          <span>Loading tests...</span>\n        </div>\n      )}\n      {error && <div className=\"text-red-600\">{error}</div>}\n      {success && <div className=\"text-green-600\">{success}</div>}\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full border text-sm\" aria-label=\"All tests table\">\n          <thead>\n            <tr className=\"bg-gray-100\">\n              <th className=\"border px-2 py-1\">Title</th>\n              <th className=\"border px-2 py-1\">Questions</th>\n              <th className=\"border px-2 py-1\">Category</th>\n              <th className=\"border px-2 py-1\">Window</th>\n              <th className=\"border px-2 py-1\">Active</th>\n              <th className=\"border px-2 py-1\">Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {tests.length === 0 ? (\n              <tr>\n                <td colSpan={6} className=\"text-center text-gray-500 py-8\">No tests found. Please create a test in the Create Test tab.</td>\n              </tr>\n            ) : (\n              tests.map(test => {\n                const questionCount = Array.isArray(test.questions) ? test.questions.length : (test.totalQuestions || 0);\n                return (\n                  <tr key={test._id} tabIndex={0} aria-label={test.title}>\n                    <td className=\"border px-2 py-1\">\n                      <div className=\"font-semibold\">{test.title}</div>\n                    </td>\n                    <td className=\"border px-2 py-1 text-center\">{questionCount}</td>\n                    <td className=\"border px-2 py-1\">{test.category}</td>\n                    <td className=\"border px-2 py-1\">\n                      {test.startDate && test.endDate ? (\n                        <span>{new Date(test.startDate).toLocaleString()} to {new Date(test.endDate).toLocaleString()}<br />\n                          <span className=\"text-xs text-gray-500\">Duration: {test.duration ? test.duration + ' min' : Math.round((new Date(test.endDate) - new Date(test.startDate))/60000) + ' min'}</span>\n                        </span>\n                      ) : (\n                        <span className=\"text-gray-400\">Not set</span>\n                      )}\n                    </td>\n                    <td className=\"border px-2 py-1\">{test.isActive ? 'Yes' : 'No'}</td>\n                   <td className=\"border px-2 py-1\">\n  <div className=\"flex flex-wrap gap-1 items-center\">\n    <button className=\"px-2 py-1 bg-yellow-500 text-white rounded text-xs\" onClick={() => openQModal(test._id)} aria-label={`Add questions to ${test.title}`}>Add</button>\n    <button className=\"px-2 py-1 bg-gray-500 text-white rounded text-xs\" onClick={() => openViewQModal(test)} aria-label={`View questions for ${test.title}`}>View</button>\n    <button className=\"px-2 py-1 bg-blue-600 text-white rounded text-xs\" onClick={() => openEditModal(test)} aria-label={`Edit settings for ${test.title}`}>Edit</button>\n    {test.isActive ? (\n      <button className=\"px-2 py-1 bg-red-600 text-white rounded text-xs\" onClick={() => {\n        if (window.confirm(`Are you sure you want to stop the test \"${test.title}\"?`)) handleDeactivate(test._id);\n      }} aria-label={`Stop test ${test.title}`}>Stop</button>\n    ) : (\n      <button className={`px-2 py-1 rounded text-xs ${questionCount === 0 ? 'bg-gray-400 text-white cursor-not-allowed' : 'bg-green-600 text-white'}`}\n        onClick={() => {\n          if (questionCount === 0) return;\n          if (window.confirm(`Are you sure you want to start the test \"${test.title}\"?`)) handleActivate(test._id);\n        }}\n        aria-label={`Start test ${test.title}`}\n        disabled={questionCount === 0}\n      >\n        Start\n      </button>\n    )}\n    <button className=\"px-2 py-1 bg-gray-800 text-white rounded text-xs\" onClick={() => handleDeleteTest(test._id)} aria-label={`Delete test ${test.title}`}>Delete</button>\n  </div>\n</td>\n                  </tr>\n                );\n              })\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Edit Test Settings Modal */}\n      {editModal.open && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded shadow-lg w-full max-w-md\">\n            <h3 className=\"font-semibold mb-4\">Edit Test Settings</h3>\n            <div className=\"mb-3\">\n              <label className=\"block font-medium mb-1\">Require All Questions to be Attempted</label>\n              <input type=\"checkbox\" checked={editModal.form.requireAllQuestions} onChange={e => handleEditChange('requireAllQuestions', e.target.checked)} />\n              <span className=\"ml-2\">ON</span>\n            </div>\n            <div className=\"mb-3\">\n              <label className=\"block font-medium mb-1\">Allow Navigation Between Questions</label>\n              <input type=\"checkbox\" checked={editModal.form.allowNavigation} onChange={e => handleEditChange('allowNavigation', e.target.checked)} />\n              <span className=\"ml-2\">ON</span>\n            </div>\n            <div className=\"mb-3\">\n              <label className=\"block font-medium mb-1\">Tab Switch Limit</label>\n              <input type=\"number\" min={1} max={10} value={editModal.form.tabSwitchLimit} onChange={e => handleEditChange('tabSwitchLimit', Number(e.target.value))} className=\"input w-20 ml-2\" />\n              <span className=\"ml-2 text-xs\">(Default: 3, 4th switch auto-submits)</span>\n            </div>\n            <div className=\"mb-3\">\n              <label className=\"block font-medium mb-1\">Device Restriction</label>\n              <div className=\"flex gap-2\">\n                <label><input type=\"radio\" name=\"deviceRestriction\" value=\"mobile\" checked={editModal.form.deviceRestriction === 'mobile'} onChange={e => handleEditChange('deviceRestriction', e.target.value)} /> Mobile Only</label>\n                <label><input type=\"radio\" name=\"deviceRestriction\" value=\"desktop\" checked={editModal.form.deviceRestriction === 'desktop'} onChange={e => handleEditChange('deviceRestriction', e.target.value)} /> Laptop/Desktop Only</label>\n                <label><input type=\"radio\" name=\"deviceRestriction\" value=\"both\" checked={editModal.form.deviceRestriction === 'both'} onChange={e => handleEditChange('deviceRestriction', e.target.value)} /> Both</label>\n              </div>\n            </div>\n            <div className=\"mb-3\">\n              <label className=\"block font-medium mb-1\">Allowed Branches</label>\n              <select multiple className=\"input w-full\" value={editModal.form.allowedBranches} onChange={e => {\n                const values = Array.from(e.target.selectedOptions, o => o.value);\n                // If 'ALL' is selected, override all others\n                if (values.includes('__ALL__')) {\n                  handleEditChange('allowedBranches', ['__ALL__']);\n                } else {\n                  handleEditChange('allowedBranches', values);\n                }\n              }}>\n                <option value=\"__ALL__\">All Branches (Allow all students)</option>\n                {branchOptions.map(branch => <option key={branch} value={branch}>{branch}</option>)}\n              </select>\n            </div>\n            <div className=\"mb-3\">\n              <label className=\"block font-medium mb-1\">Allowed Years</label>\n              <select multiple className=\"input w-full\" value={editModal.form.allowedYears} onChange={e => {\n                const values = Array.from(e.target.selectedOptions, o => o.value);\n                if (values.includes('__ALL__')) {\n                  handleEditChange('allowedYears', ['__ALL__']);\n                } else {\n                  handleEditChange('allowedYears', values);\n                }\n              }}>\n                <option value=\"__ALL__\">All Years (Allow all students)</option>\n                {yearOptions.map(year => <option key={year} value={year}>{year}</option>)}\n              </select>\n            </div>\n            <div className=\"flex gap-2 mt-4\">\n              <button className=\"px-4 py-2 bg-blue-600 text-white rounded\" onClick={handleEditSave} disabled={loading}>Save</button>\n              <button className=\"px-4 py-2 bg-gray-400 text-white rounded\" onClick={closeEditModal}>Cancel</button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Add Questions Modal */}\n      {showQModal && (\n        <AddQuestionsModal\n          closeQModal={closeQModal}\n          handleAddQuestions={handleAddQuestions}\n          loading={loading}\n        />\n      )}\n\n      {/* View Questions Modal */}\n      {viewQModal.open && (\n        <ViewQuestionsModal\n          questions={viewQModal.questions}\n          testId={viewQModal.testId}\n          testTitle={viewQModal.testTitle}\n          onClose={closeViewQModal}\n          fetchQuestions={openViewQModal}\n        />\n      )}\n\n      {/* Set Window Modal for Start Test */}\n      {windowModal.open && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded shadow-lg w-full max-w-md\">\n            <h3 className=\"font-semibold mb-2\">Set Exam Window & Duration</h3>\n            <div className=\"mb-4\">\n              <label className=\"block mb-1\">Start Date & Time</label>\n              <input type=\"datetime-local\" className=\"input w-full\" value={windowModal.start} onChange={e => setWindowModal(w => ({ ...w, start: e.target.value }))} />\n            </div>\n            <div className=\"mb-4\">\n              <label className=\"block mb-1\">End Date & Time</label>\n              <input type=\"datetime-local\" className=\"input w-full\" value={windowModal.end} onChange={e => setWindowModal(w => ({ ...w, end: e.target.value }))} />\n            </div>\n            <div className=\"mb-4\">\n              <label className=\"block mb-1\">Duration (minutes)</label>\n              <input type=\"number\" min=\"1\" className=\"input w-full\" value={windowModal.duration} onChange={e => setWindowModal(w => ({ ...w, duration: e.target.value }))} placeholder=\"Enter duration in minutes\" />\n            </div>\n            <div className=\"flex space-x-2\">\n              <button\n                className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n                onClick={() => doActivate(windowModal.testId, windowModal.start, windowModal.end, windowModal.duration)}\n                disabled={!windowModal.start || !windowModal.end || !windowModal.duration || loading}\n              >\n                Start Test\n              </button>\n              <button className=\"px-4 py-2 bg-gray-400 text-white rounded\" onClick={() => setWindowModal({ open: false, testId: null, start: '', end: '', duration: '' })}>Cancel</button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n}\nexport default ManageTestsTable;\n"],"names":["ViewQuestionsModal","_ref","questions","testId","testTitle","onClose","fetchQuestions","editIdx","setEditIdx","useState","editQ","setEditQ","saving","setSaving","msg","setMsg","cancelEdit","handleEditChange","field","value","q","_objectSpread","_jsx","className","children","_jsxs","length","map","idx","question","onChange","e","target","placeholder","option1","option2","option3","option4","correctAnswer","type","min","points","onClick","async","saveEdit","disabled","_Fragment","options","undefined","Number","startEdit","toString","AddQuestionsModal","_ref2","closeQModal","handleAddQuestions","loading","showCSV","setShowCSV","csvError","setCsvError","csvQuestions","setCsvQuestions","csvLoading","setCsvLoading","manualQuestions","setManualQuestions","currentIdx","setCurrentIdx","manualError","setManualError","handleManualChange","qs","i","style","minWidth","accept","file","files","name","endsWith","reader","FileReader","onload","event","csvText","lines","trim","split","header","h","slice","line","values","obj","forEach","parseCSV","result","err","readAsText","validQuestions","filter","removeCurrent","_","goPrev","goNext","concat","viewQModal","setViewQModal","open","openViewQModal","setLoading","setError","res","api","get","test","_id","data","title","tests","setTests","error","success","setSuccess","showQModal","setShowQModal","currentTestId","setCurrentTestId","branchOptions","setBranchOptions","yearOptions","setYearOptions","useEffect","branches","years","fetchRegistrationOptions","editModal","setEditModal","form","windowModal","setWindowModal","start","end","duration","fetchTests","closeEditModal","prev","showGuide","setShowGuide","role","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","colSpan","questionCount","Array","isArray","totalQuestions","tabIndex","category","startDate","endDate","Date","toLocaleString","Math","round","isActive","openQModal","_test$requireAllQuest","_test$allowNavigation","_test$tabSwitchLimit","requireAllQuestions","allowNavigation","deviceRestriction","allowedBranches","allowedYears","tabSwitchLimit","openEditModal","window","confirm","put","id","handleDeactivate","delete","handleDeleteTest","checked","max","multiple","from","selectedOptions","o","includes","branch","year","_err$response","_err$response$data","response","message","closeViewQModal","w","mins","parseInt","isNaN","_err$response2","_err$response2$data","backendMsg","doActivate"],"sourceRoot":""}